第一章	走向灵活软件之路――	面向对象的六大原则
	1 优化代码的第一步――单一	职责原则
	2 让程序更稳定、更灵活――	开闭原则
	3 构建扩展性更好的系统――	里氏替换原则
	4 让项目拥有变化的能力――	依赖倒置原则
	5 系统有更高的灵活性――	接口隔离原则
	6 更好的可扩展性――		迪米特原则
第二章	应用最广的模式――	单例模式			高并发反复使用创建太消耗资源，单实例反复使用
第三章	自由扩展你的项目――	Builder模式		封装性好，容易扩展，外部调用控制内部构造
第四章	使程序运行更高效――	原型模式			复写clone实现深、浅拷贝，拷贝登陆对象防止串改
第五章	应用最广泛的模式――	工厂方法模式		工厂传入.class拿到该对象实例
第六章	创建型设计模式――	抽象工厂模式		生产抽象类，面向接口编程，方便切换产品，但是不容易扩展新产品
第七章	时势造英雄――		策略模式			替换if-else，算法分离，耦合降低，扩展方便，数据安全
第八章	随遇而安――		状态模式			替换if-else，状态分离，状态改变将影响整个抽象基类的方法实现
第九章	使编程更有灵活性――	责任链模式			对象链式传递处理，避免发送接收耦合，更灵活，更可控
第十章	化繁为简的翻译机――	解释器模式			自定义语法规则，文法处理扩展灵活
第十一章	让程序畅通执行――	命令模式			游戏操作、画笔切换，事件输入，弱耦合，灵活控制，好扩展
第十二章	解决、解耦的钥匙――	观察者模式			订阅-发布，UI与业务逻辑解耦，得到通知自动更新
第十三章	编程中的后悔药――	备忘录模式			保存快照-恢复机制，禁止外部访问，完整性封装，不暴露数据
第十四章	解决问题的第三者――	迭代器模式			又称游标模式，不同集合一起遍历，又不需要暴露对象的内部表示
第十五章	抓住问题核心――		模板方法模式		步骤顺序是固定的，流程封装到final，让子类定制所有步骤
第十六章	区别显示输出――		访问者模式			数据的操作与结构分离，对象结构稳定及很多不相关操作时使用
第十七章	和事佬――			中介者模式			多对多优化为一对多，降低系统复杂性
第十八章	编程好帮手――		代理模式			访问对象困难通过代理来间接访问，或为对象提供代理限制其它访问
第十九章	物以类聚――		组合模式			部分-整体相似对象归并，忽略差别，层次结构化为树，子叶，枝干
第二十章	得心应手粘合剂――	适配器模式			Adapter，可复用并兼容双方接口，好扩展，不须修改原有代码
第二十一章	风格显示――		装饰模式			可替代继承，透明且动态扩展对象功能
第二十二章	对象共享避免创建――	享元模式			减少内存使用，缓存池提升性能，但是逻辑复杂需分离外-内部状态
第二十三章	统一编程接口――		外观模式			封闭，降低使用成本，屏蔽实现细节，高层次提供API入口，易使用
第二十四章	连接两地的交通枢钮――	桥接模式			抽象-实现分离，独立变化，双方都需要扩展并避免继承，设计复杂